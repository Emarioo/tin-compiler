/*
    An example of the Tin language
*/

fun find_string(str: char*, text: char*, text_size: int) {
    str_length: int = strlen(str);
    index: int;
    correct: int;
    global_array.ptr = cast Location*  malloc(sizeof Location * 100);
    global_array.size = 0;
    line: int = 1;
    while index < text_size {
        if text[index] == '\n' {
            line++;
        }
        if str[correct] == text[index] {
            correct++;
            if correct == str_length {
                correct = 0;
                global_array.ptr[global_array.size].line = line;
                global_array.size++;
            }
        } else {
            correct = 0;
        }
        index++;
    }
}
/*
intintintintintintintintintintintintintintintintintintintintintint
intintintintintintintintintintintintintintintintintintintintintint
intintintintintintintintintintintintintintintintintintintintintintintint
intintintintintintintintintintintintintintintintintintintintintint
intintintintintintintintintintintintintintintintint
*/
global global_array: Array;
fun main() {
    text: char*;
    size: int;
    read_file("tests/feature_set.tin", &text, &size);

    find_string("int",text,size);

    prints("Found ");
    prints("int ");
    printi(global_array.size);
    prints(" times here:\n");
    i: int;
    while i < global_array.size {
        prints(" LN ");
        printi(global_array.ptr[i].line);
        printc('\n');
        i++;
    }
    
    mfree(global_array.ptr);
    mfree(text);
}

fun strlen(str: char*): int {
    length: int; // zero initialized
    while str[length] {
        length++;
    }
    return length;
}

struct Array {
    ptr: Location*,
    size: int,
}
struct Location {
    line: int,
}